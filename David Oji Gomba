from flask import Flask, render_template_string, request, jsonify, send_file
from PIL import Image
import os
import zipfile
import io
import json
import random

app = Flask(__name__)

# Configuration
CONFIG = {
    "output_dir": 'generated',
    "metadata_dir": 'generated/metadata',
    "images_dir": 'generated/images',
    "metadata_file": "metadata.json",
    "image_width": 1024,
    "image_height": 1024,
    "image_quality": 95,  # Set the quality to 95 for high-quality images
}

TRAITS_PATHS = {
    "Background": 'uploads/Background',
    "Body": 'uploads/Body',
    "Clothes": 'uploads/Clothes',
    "Eyes": 'uploads/Eyes',
    "Head": 'uploads/Head',
}

# Ensure directories exist
os.makedirs(CONFIG["output_dir"], exist_ok=True)
os.makedirs(CONFIG["metadata_dir"], exist_ok=True)
os.makedirs(CONFIG["images_dir"], exist_ok=True)

def get_trait_files(trait_paths):
    """Read the trait files from directories"""
    return {trait: os.listdir(path) for trait, path in trait_paths.items()}

def create_image(token_id, traits_combination, traits_paths, output_dir, image_width, image_height, image_quality):
    """Generate a unique image"""
    layers = []
    for trait, file_name in traits_combination.items():
        image_path = os.path.join(traits_paths[trait], file_name)
        layer = Image.open(image_path).convert("RGBA")
        layer = layer.resize((image_width, image_height))
        layers.append(layer)

    base = Image.new("RGBA", (image_width, image_height))
    for layer in layers:
        base = Image.alpha_composite(base, layer)

    output_path = os.path.join(output_dir, f"{token_id}.png")
    base.save(output_path, quality=image_quality)  # Set the quality when saving the image

def create_metadata(token_id, traits_combination):
    """Generate metadata for an NFT"""
    metadata = {
        "name": f"NFT #{token_id}",
        "description": "An awesome NFT collection!",
        "image": f"{token_id}.png",
        "attributes": [{"trait_type": trait, "value": file_name.split('.')[0]} for trait, file_name in traits_combination.items()],
    }
    return metadata

def generate_nfts(num_nfts, resolution):
    """Generate NFTs and metadata"""
    traits = get_trait_files(TRAITS_PATHS)
    all_metadata = []

    for i in range(num_nfts):
        traits_combination = {trait: random.choice(files) for trait, files in traits.items()}

        # Create image
        create_image(i + 1, traits_combination, TRAITS_PATHS, CONFIG["images_dir"], resolution[0], resolution[1], CONFIG["image_quality"])

        # Create metadata
        metadata = create_metadata(i + 1, traits_combination)
        all_metadata.append(metadata)

        # Save metadata to individual files
        with open(os.path.join(CONFIG["metadata_dir"], f"{i + 1}.json"), 'w') as f:
            json.dump(metadata, f, indent=4)

    # Save all metadata to a single file (optional)
    with open(os.path.join(CONFIG["metadata_dir"], CONFIG["metadata_file"]), 'w') as f:
        json.dump(all_metadata, f, indent=4)

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/upload_layer', methods=['POST'])
def upload_layer():
    if 'file' not in request.files or 'trait_type' not in request.form:
        return jsonify({'error': 'No file or trait type provided'}), 400
    file = request.files['file']
    trait_type = request.form['trait_type']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    if trait_type not in TRAITS_PATHS:
        return jsonify({'error': 'Invalid trait type'}), 400

    file_path = os.path.join(TRAITS_PATHS[trait_type], file.filename)
    file.save(file_path)
    return jsonify({'message': f'Layer {file.filename} uploaded successfully'}), 200

@app.route('/generate_nft', methods=['POST'])
def generate_nft():
    try:
        data = request.json
        num_nfts = int(data.get('num_nfts', 1))
        resolution = tuple(data.get('resolution', (CONFIG["image_width"], CONFIG["image_height"])))

        generate_nfts(num_nfts, resolution)

        preview_image = os.path.join(CONFIG["images_dir"], "1.png")
        return jsonify({'nft_image': preview_image}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/download_zip', methods=['GET'])
def download_zip():
    memory_file = io.BytesIO()
    with zipfile.ZipFile(memory_file, 'w') as zf:
        for folder_name in ['images', 'metadata']:
            folder_path = os.path.join(CONFIG["output_dir"], folder_name)
            for root, _, files in os.walk(folder_path):
                for file in files:
                    zf.write(os.path.join(root, file), os.path.relpath(os.path.join(root, file), CONFIG["output_dir"]))
    memory_file.seek(0)
    return send_file(memory_file, as_attachment=True, download_name='nfts.zip')

# HTML with CSS
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PAW STUDIO ART GENERATOR</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            background-color: #000000; /* Black background */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #f8f9fa; /* Light text for contrast */
        }
        .container {
            margin-top: 50px;
            background-color: #1a1a1a; /* Dark grey background for the container */
            border-radius: 10px;
            padding: 20px;
        }
        h1, h2 {
            text-align: center;
            margin-bottom: 30px;
            color: #20c997; /* Sea green color for headings */
        }
        .custom-file-label::after {
            content: "Browse";
        }
        .btn-custom {
            background-color: #20c997; /* Sea green button */
            color: #000; /* Black text on button */
            border-radius: 5px;
            border: none;
        }
        .btn-custom:hover {
            background-color: #1aab91; /* Darker sea green on hover */
        }
        .form-control {
            background-color: #333; /* Dark background for form controls */
            color: #f8f9fa; /* Light text for form controls */
            border: 1px solid #444; /* Slightly lighter border for contrast */
        }
        .form-control:focus {
            border-color: #20c997; /* Sea green border on focus */
            box-shadow: 0 0 0 0.2rem rgba(32, 201, 151, 0.25);
        }
        .alert-success {
            background-color: #20c997; /* Sea green background for success alerts */
            color: #fff;
        }
        .alert-danger {
            background-color: #dc3545; /* Bootstrap default danger color */
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="text-center">
            <h1>PAW STUDIO ART GENERATOR</h1>
        </div>
        <div class="row">
            <div class="col-md-6">
                <h2>Upload Layers</h2>
                <form id="uploadForm">
                    <div class="form-group">
                        <label for="trait_type">Trait Type</label>
                        <select id="trait_type" name="trait_type" class="form-control">
                            <option value="Background">Background</option>
                            <option value="Body">Body</option>
                            <option value="Clothes">Clothes</option>
                            <option value="Eyes">Eyes</option>
                            <option value="Head">Head</option>
                        </select>
                    </div>
                    <div class="custom-file">
                        <input type="file" class="custom-file-input" id="file" name="file">
                        <label class="custom-file-label" for="file">Choose file</label>
                    </div>
                    <button type="submit" class="btn btn-custom mt-3">Upload Layer</button>
                </form>
                <div id="uploadResponse"></div>
            </div>
            <div class="col-md-6">
                <h2>Generate NFTs</h2>
                <form id="generateForm">
                    <div class="form-group">
                        <label for="num_nfts">Number of NFTs</label>
                        <input type="number" id="num_nfts" name="num_nfts" class="form-control" value="1" min="1">
                    </div>
                    <div class="form-group">
                        <label for="resolution">Resolution</label>
                        <select id="resolution" name="resolution" class="form-control">
                            <option value="1024x1024" selected>1024x1024</option>
                            <option value="512x512">512x512</option>
                            <option value="256x256">256x256</option>
                            <option value="128x128">128x128</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-custom">Generate NFT</button>
                </form>
                <div id="generateResponse"></div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $(document).ready(function() {
            $('#uploadForm').submit(function(e) {
                e.preventDefault();
                var formData = new FormData(this);
                $.ajax({
                    url: '/upload_layer',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(data) {
                        $('#uploadResponse').html('<div class="alert alert-success">' + data.message + '</div>');
                    },
                    error: function(err) {
                        $('#uploadResponse').html('<div class="alert alert-danger">' + err.responseJSON.error + '</div>');
                    }
                });
            });

            $('#generateForm').submit(function(e) {
                e.preventDefault();
                var formData = {
                    'num_nfts': $('#num_nfts').val(),
                    'resolution': $('#resolution').val().split('x').map(Number)  // Convert resolution to [width, height]
                };
                $.ajax({
                    url: '/generate_nft',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(data) {
                        $('#generateResponse').html('<div class="alert alert-success">NFT generated successfully! <a href="/download_zip">Download ZIP</a></div>');
                    },
                    error: function(err) {
                        $('#generateResponse').html('<div class="alert alert-danger">' + err.responseJSON.error + '</div>');
                    }
                });
            });
        });
    </script>
</body>
</html>
"""

if __name__ == '__main__':
    app.run(debug=True)
